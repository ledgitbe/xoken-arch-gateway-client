/**
 * Test vectors generated from python client
 */

export const wire = [
  {
    call: 'getBlockByHeight',
    args: 100,
    hex: '00168400016d4845494748542d3e424c4f434b8182001864',
  },
  {
    call: 'getBlocksByHeights',
    args: [100, 101, 102],
    hex: '001f840001715b4845494748545d2d3e5b424c4f434b5d81820183186418651866',
  },
  {
    call: 'getBlockByHash',
    args: '00000000d1145790a8694403d4063f323d499e655c83426834d4ce2f8dd4a2ee',
    hex:
      '00548400016b484153482d3e424c4f434b818202784030303030303030306431313435373930613836393434303364343036336633323364343939653635356338333432363833346434636532663864643461326565',
  },
  {
    call: 'getBlocksByHashes',
    args: [
      '000000000000000002af2a6de04d4a1a73973827eae348fe4d3f4d05610ff968',
      '000000000000000007fc734cbf1fc04c59cf7ecb6af0707fd5cf5b8d46dc4c75',
    ],
    hex:
      '009b8400016f5b484153485d2d3e5b424c4f434b5d81820382784030303030303030303030303030303030303261663261366465303464346131613733393733383237656165333438666534643366346430353631306666393638784030303030303030303030303030303030303766633733346362663166633034633539636637656362366166303730376664356366356238643436646334633735',
  },
  {
    call: 'getTransactionByTxId',
    args: '7d3eb236b526bd681b7fc499d657d237b4d3bc21ef25b37fc1c70822849f1243',
    hex:
      '005184000168545849442d3e5458818204784037643365623233366235323662643638316237666334393964363537643233376234643362633231656632356233376663316337303832323834396631323433',
  },
  {
    call: 'getTransactionsByTxIds',
    args: [
      '6c828920ea3a968f0c3c4a8f14d70b696e0440d8e4e1d019cced1ba2cc63cd51',
      '097cf9d4ec10711e809f316b7738bbbff94efe32ea2cd55e57ddf5840f828741',
    ],
    hex:
      '00988400016c5b545849445d2d3e5b54585d81820582784036633832383932306561336139363866306333633461386631346437306236393665303434306438653465316430313963636564316261326363363363643531784030393763663964346563313037313165383039663331366237373338626262666639346566653332656132636435356535376464663538343066383238373431',
  },
  {
    call: 'getOutputsByAddress',
    args: '13n561iVozTtMXJzAJNA5TQsnTboRvpxae',
    hex:
      '00398400016e414444522d3e5b4f55545055545d818206782231336e35363169566f7a54744d584a7a414a4e41355451736e54626f527670786165',
  },
  {
    call: 'getOutputsByAddresses',
    args: [
      '1P8Jd8qQM7y45iXLM1eiXCCmGRhCPjykZB',
      '16qgC3hzi38xo1vn2gGsNVwWaW1sEH3h9R',
    ],
    hex:
      '0060840001705b414444525d2d3e5b4f55545055545d8182078278223150384a643871514d3779343569584c4d3165695843436d47526843506a796b5a427822313671674333687a693338786f31766e326747734e56775761573173454833683952',
  },
  {
    call: 'getMerkleBranchByTxId',
    args: '571c7508413415debe4ba146a2ed141e4d4204d0743169ab3366b1f1e1960a5d',
    hex:
      '00568400016d545849442d3e5b4d4e4f44455d818208784035373163373530383431333431356465626534626131343661326564313431653464343230346430373433313639616233333636623166316531393630613564',
  },
];

const _wireByCall = {} as { [key: string]: any };

for (const vector of wire) {
  _wireByCall[vector.call] = vector;
}

export const wireByCall = _wireByCall;
